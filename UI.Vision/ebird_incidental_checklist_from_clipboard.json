{
  "Name": "eBird Incidental Checklist Create",
  "CreationDate": "2025-6-2",
  "Commands": [
    {
      "Command": "store",
      "Target": "true",
      "Value": "testingMode",
      "Description": "Use 'true' when testing, doesn't create real checklist (will still create a location).  Warning messages included"
    },
    {
      "Command": "store",
      "Target": "false",
      "Value": "autoSubmit",
      "Description": "When true, automatically submit checklist.  When false, the macros stops processing when the blank bird list is displayed to the user"
    },
    {
      "Command": "store",
      "Target": "false",
      "Value": "skipComment",
      "Description": "When true, dictated bird data will not be included in the checklist comments. Only used if 'autoSubmit' is false"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return (${autoSubmit} == 'false' && ${skipComment} == 'true') ? 'true' : 'false';",
      "Value": "dontComment",
      "Description": "Do we skip comments or not?"
    },
    {
      "Command": "store",
      "Target": "mac",
      "Value": "platform",
      "Description": "Store value 'mac' into variable 'platform'"
    },
    {
      "Command": "if_v2",
      "Target": "${platform} == 'mac'",
      "Value": "",
      "Description": "Start conditional block: ${platform} == 'mac'"
    },
    {
      "Command": "store",
      "Target": "/Users/jameschurches/.pyenv/shims/python3",
      "Value": "pythonPath",
      "Description": "Store value macOS Python path into variable 'pythonPath'"
    },
    {
      "Command": "store",
      "Target": "\"/Users/jameschurches/Library/Application Support/eBirdChecklistNameFromGPS/eBirdChecklistNameFromGPS.py\"",
      "Value": "scriptPath",
      "Description": "Store 'macOS' relevent script path into variable 'scriptPath'. Update as required"
    },
    {
      "Command": "else",
      "Target": "",
      "Value": "",
      "Description": "Else block (alternative path)"
    },
    {
      "Command": "store",
      "Target": "C:\\Python39\\python.exe",
      "Value": "pythonPath",
      "Description": "Store value Windows Python path into variable 'pythonPath'"
    },
    {
      "Command": "store",
      "Target": "\"C:\\Users\\James\\Documents\\eBirdChecklistNameFromGPS\\eBirdChecklistNameFromGPS.py\"",
      "Value": "scriptPath",
      "Description": "Store Windows releven script path into variable 'scriptPath'.  Update as required"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "End of conditional or loop block"
    },
    {
      "Command": "echo",
      "Target": "üõ†Ô∏è Testing Mode: ${testingMode}",
      "Value": "grey",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üõ†Ô∏è Auto Submit Mode: ${autoSubmit}",
      "Value": "grey",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üõ†Ô∏è Skip checklist comments: ${skipComment}",
      "Value": "grey",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üõ†Ô∏è Platform: ${platform}",
      "Value": "grey",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üêç Python Path: ${pythonPath}",
      "Value": "grey",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üìö Script Path: ${scriptPath}",
      "Value": "grey",
      "Description": "Display message"
    },
    {
      "Command": "if_v2",
      "Target": "${testingMode} == 'true'",
      "Value": "",
      "Description": "If testingMode print a messages"
    },
    {
      "Command": "echo",
      "Target": "‚ö†Ô∏è TESTING: Checklist will not be submitted to eBird",
      "Value": "orange",
      "Description": "Show warning message"
    },
    {
      "Command": "echo",
      "Target": "‚ö†Ô∏è TESTING: The new location will be created without an attached checklist.  Clean the location up after testing.  Find it under 'Locations' in My eBird",
      "Value": "orange",
      "Description": "Show warning message"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "End conditional output"
    },
    {
      "Command": "store",
      "Target": "${!clipboard}",
      "Value": "rawEntry",
      "Description": "Grab raw entry from clipboard"
    },
    {
      "Command": "echo",
      "Target": "üìé Clipboard data: ${rawEntry}",
      "Value": "grey",
      "Description": "Show full input line from clipboard"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var raw = \"\" + ${rawEntry}; raw = raw.replace(/[\\\"‚Äú‚Äù‚Äò‚Äô]/g, '').trim(); var parts = raw.split('|'); return JSON.stringify(parts);",
      "Value": "entryParts",
      "Description": "Split raw clipboard entry into parts and store as JSON string"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var parts = JSON.parse(${entryParts}); if (parts.length < 3) return 'false'; var dt = parts[0].trim(); var gps = parts[1].replace('GPS:', '').trim(); var coords = gps.split(','); var lat = parseFloat(coords[0]); var lon = parseFloat(coords[1]); if (dt.indexOf('Date/time:') === -1 || dt.indexOf(' at ') === -1) return 'false'; if (parts[2].indexOf('Record(s):') === -1) return 'false'; if (coords.length !== 2 || isNaN(lat) || isNaN(lon)) return 'false'; if (lat < -90 || lat > 90 || lon < -180 || lon > 180) return 'false'; return 'true';",
      "Value": "clipboardValid",
      "Description": "Validate clipboard format using cleaned and parsed parts"
    },
    {
      "Command": "echo",
      "Target": "üîé Clipboard valid: ${clipboardValid}",
      "Value": "grey",
      "Description": "Show what we actually captured"
    },
    {
      "Command": "if_v2",
      "Target": "${clipboardValid} == 'false'",
      "Value": "",
      "Description": "Stop if input is not valid"
    },
    {
      "Command": "echo",
      "Target": "‚ùå Clipboard does not contain valid bird log data. Please copy a valid entry.",
      "Value": "red",
      "Description": "Notify user"
    },
    {
      "Command": "pause",
      "Target": "3000",
      "Value": "",
      "Description": "Pause to show error"
    },
    {
      "Command": "gotoLabel",
      "Target": "theVeryEnd",
      "Value": "",
      "Description": "Jump to label: theVeryEnd"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "Stop macro early"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var raw = '${rawEntry}'; var dt = raw.split('|')[0]; return dt.replace('Date/time:', '').replace(/['\"‚Äú‚Äù]/g, '').trim();",
      "Value": "datetimeRaw",
      "Description": "Clean datetime (no quotes, no smart characters)"
    },
    {
      "Command": "echo",
      "Target": "üóì Raw date and time data: ${datetimeRaw}",
      "Value": "grey",
      "Description": "Log full datetime string"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var dt = '${datetimeRaw}'; return dt.split(' at ')[0].trim();",
      "Value": "datePart",
      "Description": "Extract date component"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var dt = '${datetimeRaw}'; return dt.split(' at ')[1].trim();",
      "Value": "timePart",
      "Description": "Extract time component"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var parts = ${rawEntry}.split('|'); return parts[1].replace('GPS:', '').trim();",
      "Value": "gpsRaw",
      "Description": "Extract GPS"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var t = '${timePart}'.replace(/‚Äú|‚Äù|\"|\\u202f/g, '').trim(); return t.split(':')[1];",
      "Value": "oMin",
      "Description": "Extract minute"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var coords = ${gpsRaw}.split(','); return coords[0].trim();",
      "Value": "lat",
      "Description": "Extract Latitude"
    },
    {
      "Command": "echo",
      "Target": "üìç Latitude: ${lat}",
      "Value": "blue",
      "Description": "Display parsed latitude"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var coords = ${gpsRaw}.split(','); return coords[1].trim();",
      "Value": "lon",
      "Description": "Extract Longitude"
    },
    {
      "Command": "echo",
      "Target": "üìç Longitude: ${lon}",
      "Value": "blue",
      "Description": "Display parsed latitude"
    },
    {
      "Command": "store",
      "Target": "${gpsRaw}",
      "Value": "!clipboard",
      "Description": "Copy raw GPS to clipboard for name formatter"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var parts = ${rawEntry}.split('|'); return parts.slice(2).join('|').replace('Record(s):', '').trim();",
      "Value": "commentText",
      "Description": "Extract dictation comment"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var dt = '${datetimeRaw}'; return dt.split(' at ')[1].trim();",
      "Value": "timePart",
      "Description": "Extract time component"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var dp = '${datePart}'.replace(/[‚Äú‚Äù\"]/g, '').trim(); return parseInt(dp.split(' ')[0], 10);",
      "Value": "oDay",
      "Description": "Clean and extract numeric day"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var dp = '${datePart}'; return dp.split(' ')[1].substring(0,3);",
      "Value": "oMonth",
      "Description": "Extract 3-letter month and return it"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var dp = '${datePart}'.replace(/‚Äú|‚Äù|\"/g, '').trim(); return dp.split(' ')[2];",
      "Value": "oYear",
      "Description": "Extract year"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var t = '${timePart}'.replace(/‚Äú|‚Äù|\"/g, '').trim(); return t.split(':')[0];",
      "Value": "oHour",
      "Description": "Extract hour"
    },
    {
      "Command": "XRun",
      "Target": "${pythonPath}",
      "Value": "${scriptPath}",
      "Description": "Run Python script to format location name (uses platform-specific paths)"
    },
    {
      "Command": "store",
      "Target": "0",
      "Value": "retryCount",
      "Description": "Store value '0' into variable 'retryCount'"
    },
    {
      "Command": "label",
      "Target": "waitForFormatted",
      "Value": "",
      "Description": "Define label"
    },
    {
      "Command": "store",
      "Target": "${!clipboard}",
      "Value": "temp",
      "Description": "Store value '${!clipboard}' into variable 'temp'"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var t = '${temp}'.trim(); if (t.indexOf('(') > -1 && t.indexOf(',') > -1) { return true; } else { return false; }",
      "Value": "formattedReady",
      "Description": "Execute custom JavaScript in sandboxed environment"
    },
    {
      "Command": "if_v2",
      "Target": "${formattedReady} == false",
      "Value": "",
      "Description": "Start conditional block: ${formattedReady} == false"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "return parseInt(${retryCount}) + 1;",
      "Value": "retryCount",
      "Description": "Execute custom JavaScript in sandboxed environment"
    },
    {
      "Command": "echo",
      "Target": "üåÄ Retry loop: ${retryCount}/5",
      "Value": "grey",
      "Description": "Display message"
    },
    {
      "Command": "if_v2",
      "Target": "${retryCount} > 5",
      "Value": "",
      "Description": "Start conditional block: ${retryCount} > 5"
    },
    {
      "Command": "echo",
      "Target": "‚ùå Timeout waiting for clipboard update",
      "Value": "red",
      "Description": "Display message"
    },
    {
      "Command": "throwError",
      "Target": "Formatted location was never returned. Stopping.",
      "Value": "",
      "Description": "Stop macro execution with error: Formatted location was never returned. Stopping."
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "End of conditional or loop block"
    },
    {
      "Command": "pause",
      "Target": "500",
      "Value": "",
      "Description": "Pause execution for 500 milliseconds"
    },
    {
      "Command": "gotoLabel",
      "Target": "waitForFormatted",
      "Value": "",
      "Description": "Jump to label: waitForFormatted"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "End of conditional or loop block"
    },
    {
      "Command": "label",
      "Target": "afterFormattedWait",
      "Value": "",
      "Description": "Define label: afterFormattedWait"
    },
    {
      "Command": "store",
      "Target": "${!clipboard}",
      "Value": "newLocation",
      "Description": "Save formatted location"
    },
    {
      "Command": "echo",
      "Target": "‚úçÔ∏è Formatted location name: ${newLocation}",
      "Value": "blue",
      "Description": "Display message: New location name"
    },
    {
      "Command": "executeScript_Sandbox",
      "Target": "var str = ${temp}; return str.indexOf('Unknown') === 0;",
      "Value": "isUnknown",
      "Description": "Check if formatted name begins with 'Unknown'"
    },
    {
      "Command": "if_v2",
      "Target": "${isUnknown} == true",
      "Value": "",
      "Description": "Abort if 'Unknown'"
    },
    {
      "Command": "echo",
      "Target": "‚ùå Name starts with 'Unknown'. Manual fix needed.",
      "Value": "red",
      "Description": "Print an error about the 'unknown' value"
    },
    {
      "Command": "pause",
      "Target": "1500",
      "Value": "",
      "Description": "Pause for the user to see the warning message then continue ..."
    },
    {
      "Command": "gotoLabel",
      "Target": "theVeryEnd",
      "Value": "",
      "Description": "Go to the end of the macro to exit gracefully"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "End check"
    },
    {
      "Command": "clickAndWait",
      "Target": "linkText=Use Latitude/Longitude",
      "Value": "",
      "Description": "Enter coordinates"
    },
    {
      "Command": "type",
      "Target": "name=lat",
      "Value": "${lat}",
      "Description": "Type latitude"
    },
    {
      "Command": "type",
      "Target": "name=lng",
      "Value": "${lon}",
      "Description": "Type longitude"
    },
    {
      "Command": "clickAndWait",
      "Target": "xpath=//button[@name='continue']",
      "Value": "",
      "Description": "Submit coordinates"
    },
    {
      "Command": "type",
      "Target": "id=name",
      "Value": "${newLocation}",
      "Description": "Paste formatted location name"
    },
    {
      "Command": "clickAndWait",
      "Target": "xpath=//button[@name='continue']",
      "Value": "",
      "Description": "Continue to date/effort screen"
    },
    {
      "Command": "echo",
      "Target": "üåê New location submitted",
      "Value": "blue",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üóì Checklist month: ${oMonth}",
      "Value": "blue",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üóì Checklist day: ${oDay}",
      "Value": "blue",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "üóì Checklist year: ${oYear}",
      "Value": "blue",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "‚è∞ Checklist start hour: ${oHour}",
      "Value": "blue",
      "Description": "Display message"
    },
    {
      "Command": "echo",
      "Target": "‚è∞ Checklist start minute: ${oMin}",
      "Value": "blue",
      "Description": "Display message"
    },
    {
      "Command": "select",
      "Target": "id=p-month",
      "Value": "label=${oMonth}",
      "Description": "Select observation month"
    },
    {
      "Command": "select",
      "Target": "id=p-day",
      "Value": "label=${oDay}",
      "Description": "Select observation day"
    },
    {
      "Command": "select",
      "Target": "id=p-year",
      "Value": "label=${oYear}",
      "Description": "Select observation year"
    },
    {
      "Command": "click",
      "Target": "id=P20",
      "Value": "",
      "Description": "Select 'Incidental' as observation type"
    },
    {
      "Command": "type",
      "Target": "id=p-shared-hr",
      "Value": "${oHour}",
      "Description": "Enter checklist start (hour)"
    },
    {
      "Command": "type",
      "Target": "id=p-shared-min",
      "Value": "${oMin}",
      "Description": "Type checklist start (minute)"
    },
    {
      "Command": "type",
      "Target": "id=p-party-size",
      "Value": "1",
      "Description": "Type party size (currently hardcoded as 1"
    },
    {
      "Command": "if_v2",
      "Target": "${dontComment} == 'false'",
      "Value": "",
      "Description": "To comment or not to comment, that is the question ...."
    },
    {
      "Command": "echo",
      "Target": "Checklist comments: ${commentText}",
      "Value": "blue",
      "Description": "Display message"
    },
    {
      "Command": "type",
      "Target": "id=p-comments",
      "Value": "${commentText}",
      "Description": "Paste dictation as comment"
    },
    {
      "Command": "else",
      "Target": "",
      "Value": "",
      "Description": "Else block (comments)"
    },
    {
      "Command": "echo",
      "Target": "‚ö†Ô∏è Checklist comments skipped",
      "Value": "orange",
      "Description": "Display message"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "End of comments conditional"
    },
    {
      "Command": "clickAndWait",
      "Target": "xpath=//*[@id=\"btn-eff-continue\"]/span",
      "Value": "",
      "Description": "Click the continue button"
    },
    {
      "Command": "if_v2",
      "Target": "${testingMode} == 'true'",
      "Value": "",
      "Description": "If testingMode is true, skip actual submission"
    },
    {
      "Command": "echo",
      "Target": "‚ö†Ô∏è Testing mode: Checklist submission skipped",
      "Value": "orange",
      "Description": "Test mode echo"
    },
    {
      "Command": "echo",
      "Target": "‚ö†Ô∏è Testing mode:  The new location will have been created without an attached checklist.  Clean this up after testing.  Find it under 'Locations' in My eBird",
      "Value": "orange",
      "Description": "Test mode echo"
    },
    {
      "Command": "echo",
      "Target": "üéâ Testing run completed successfully!",
      "Value": "green",
      "Description": "Testing confirmation"
    },
    {
      "Command": "gotoLabel",
      "Target": "theVeryEnd",
      "Value": "",
      "Description": "Stop here"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "Testing mode"
    },
    {
      "Command": "if_v2",
      "Target": "${autoSubmit} == 'false'",
      "Value": "",
      "Description": "User wants to add birds manually"
    },
    {
      "Command": "echo",
      "Target": "‚úÖ Checklist created. Enter bird data and submit manually.",
      "Value": "green",
      "Description": "Manual submit notice"
    },
    {
      "Command": "gotoLabel",
      "Target": "theVeryEnd",
      "Value": "",
      "Description": "Stop here"
    },
    {
      "Command": "endif",
      "Target": "",
      "Value": "",
      "Description": "End create but not submit conditional"
    },
    {
      "Command": "clickAndWait",
      "Target": "css=#btn-continue > span",
      "Value": "",
      "Description": "Submit checklist"
    },
    {
      "Command": "echo",
      "Target": "üéâ Checklist created successfully!",
      "Value": "green",
      "Description": "Final confirmation"
    },
    {
      "Command": "label",
      "Target": "theVeryEnd",
      "Value": "",
      "Description": "Define label: theVeryEnd"
    }
  ]
}